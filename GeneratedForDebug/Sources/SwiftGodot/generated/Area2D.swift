// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
#if canImport(Darwin)
import Darwin
#elseif os(Windows)
import ucrt
import WinSDK
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#else
#error("Unable to identify your C library.")
#endif
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A region of 2D space that detects other ``CollisionObject2D``s entering or exiting it.
/// 
/// ``Area2D`` is a region of 2D space defined by one or multiple ``CollisionShape2D`` or ``CollisionPolygon2D`` child nodes. It detects when other ``CollisionObject2D``s enter or exit it, and it also keeps track of which collision objects haven't exited it yet (i.e. which one are overlapping it).
/// 
/// This node can also locally alter or override physics parameters (gravity, damping) and route audio to custom audio buses.
/// 
/// > Note: Areas and bodies created with ``PhysicsServer2D`` might not interact as expected with ``Area2D``s, and might not emit signals or track objects correctly.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``bodyShapeEntered``
/// - ``bodyShapeExited``
/// - ``bodyEntered``
/// - ``bodyExited``
/// - ``areaShapeEntered``
/// - ``areaShapeExited``
/// - ``areaEntered``
/// - ``areaExited``
open class Area2D: CollisionObject2D {
    override open class var godotClassName: StringName { "Area2D" }
    public enum SpaceOverride: Int64, CaseIterable, CustomDebugStringConvertible {
        /// This area does not affect gravity/damping.
        case disabled = 0 // SPACE_OVERRIDE_DISABLED
        /// This area adds its gravity/damping values to whatever has been calculated so far (in ``priority`` order).
        case combine = 1 // SPACE_OVERRIDE_COMBINE
        /// This area adds its gravity/damping values to whatever has been calculated so far (in ``priority`` order), ignoring any lower priority areas.
        case combineReplace = 2 // SPACE_OVERRIDE_COMBINE_REPLACE
        /// This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.
        case replace = 3 // SPACE_OVERRIDE_REPLACE
        /// This area replaces any gravity/damping calculated so far (in ``priority`` order), but keeps calculating the rest of the areas.
        case replaceCombine = 4 // SPACE_OVERRIDE_REPLACE_COMBINE
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            switch self {
                case .disabled: return ".disabled"
                case .combine: return ".combine"
                case .combineReplace: return ".combineReplace"
                case .replace: return ".replace"
                case .replaceCombine: return ".replaceCombine"
            }
            
        }
        
    }
    
    
    /* Properties */
    
    /// If `true`, the area detects bodies or areas entering and exiting it.
    final public var monitoring: Bool {
        get {
            return is_monitoring ()
        }
        
        set {
            set_monitoring (newValue)
        }
        
    }
    
    /// If `true`, other monitoring areas can detect this area.
    final public var monitorable: Bool {
        get {
            return is_monitorable ()
        }
        
        set {
            set_monitorable (newValue)
        }
        
    }
    
    /// The area's priority. Higher priority areas are processed first. The ``World2D``'s physics is always processed last, after all areas.
    final public var priority: Int32 {
        get {
            return get_priority ()
        }
        
        set {
            set_priority (newValue)
        }
        
    }
    
    /// Override mode for gravity calculations within this area. See ``Area2D/SpaceOverride`` for possible values.
    final public var gravitySpaceOverride: Area2D.SpaceOverride {
        get {
            return get_gravity_space_override_mode ()
        }
        
        set {
            set_gravity_space_override_mode (newValue)
        }
        
    }
    
    /// If `true`, gravity is calculated from a point (set via ``gravityPointCenter``). See also ``gravitySpaceOverride``.
    final public var gravityPoint: Bool {
        get {
            return is_gravity_a_point ()
        }
        
        set {
            set_gravity_is_point (newValue)
        }
        
    }
    
    /// The distance at which the gravity strength is equal to ``gravity``. For example, on a planet 100 pixels in radius with a surface gravity of 4.0 px/s², set the ``gravity`` to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 pixels from the center the gravity will be 1.0 px/s² (twice the distance, 1/4th the gravity), at 50 pixels it will be 16.0 px/s² (half the distance, 4x the gravity), and so on.
    /// 
    /// The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance.
    /// 
    final public var gravityPointUnitDistance: Double {
        get {
            return get_gravity_point_unit_distance ()
        }
        
        set {
            set_gravity_point_unit_distance (newValue)
        }
        
    }
    
    /// If gravity is a point (see ``gravityPoint``), this will be the point of attraction.
    final public var gravityPointCenter: Vector2 {
        get {
            return get_gravity_point_center ()
        }
        
        set {
            set_gravity_point_center (newValue)
        }
        
    }
    
    /// The area's gravity vector (not normalized).
    final public var gravityDirection: Vector2 {
        get {
            return get_gravity_direction ()
        }
        
        set {
            set_gravity_direction (newValue)
        }
        
    }
    
    /// The area's gravity intensity (in pixels per second squared). This value multiplies the gravity direction. This is useful to alter the force of gravity without altering its direction.
    final public var gravity: Double {
        get {
            return get_gravity ()
        }
        
        set {
            set_gravity (newValue)
        }
        
    }
    
    /// Override mode for linear damping calculations within this area. See ``Area2D/SpaceOverride`` for possible values.
    final public var linearDampSpaceOverride: Area2D.SpaceOverride {
        get {
            return get_linear_damp_space_override_mode ()
        }
        
        set {
            set_linear_damp_space_override_mode (newValue)
        }
        
    }
    
    /// The rate at which objects stop moving in this area. Represents the linear velocity lost per second.
    /// 
    /// See ``ProjectSettings/physics/2d/defaultLinearDamp`` for more details about damping.
    /// 
    final public var linearDamp: Double {
        get {
            return get_linear_damp ()
        }
        
        set {
            set_linear_damp (newValue)
        }
        
    }
    
    /// Override mode for angular damping calculations within this area. See ``Area2D/SpaceOverride`` for possible values.
    final public var angularDampSpaceOverride: Area2D.SpaceOverride {
        get {
            return get_angular_damp_space_override_mode ()
        }
        
        set {
            set_angular_damp_space_override_mode (newValue)
        }
        
    }
    
    /// The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.
    /// 
    /// See ``ProjectSettings/physics/2d/defaultAngularDamp`` for more details about damping.
    /// 
    final public var angularDamp: Double {
        get {
            return get_angular_damp ()
        }
        
        set {
            set_angular_damp (newValue)
        }
        
    }
    
    /// If `true`, the area's audio bus overrides the default audio bus.
    final public var audioBusOverride: Bool {
        get {
            return is_overriding_audio_bus ()
        }
        
        set {
            set_audio_bus_override (newValue)
        }
        
    }
    
    /// The name of the area's audio bus.
    final public var audioBusName: StringName {
        get {
            return get_audio_bus_name ()
        }
        
        set {
            set_audio_bus_name (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_gravity_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2879900038)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_space_override_mode(_ spaceOverrideMode: Area2D.SpaceOverride) {
        withUnsafePointer(to: spaceOverrideMode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity_space_override_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_gravity_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3990256304)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_space_override_mode() -> Area2D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(Area2D.method_get_gravity_space_override_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return Area2D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_gravity_is_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity_is_point")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_is_point(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity_is_point, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_gravity_a_point: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_gravity_a_point")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_gravity_a_point() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_is_gravity_a_point, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_point_unit_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity_point_unit_distance")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_point_unit_distance(_ distanceScale: Double) {
        withUnsafePointer(to: distanceScale) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity_point_unit_distance, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_gravity_point_unit_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity_point_unit_distance")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_point_unit_distance() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Area2D.method_get_gravity_point_unit_distance, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_point_center: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity_point_center")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_point_center(_ center: Vector2) {
        withUnsafePointer(to: center) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity_point_center, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_gravity_point_center: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity_point_center")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_point_center() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Area2D.method_get_gravity_point_center, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity_direction")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_direction(_ direction: Vector2) {
        withUnsafePointer(to: direction) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity_direction, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_gravity_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity_direction")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_direction() -> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall(Area2D.method_get_gravity_direction, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_gravity")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity(_ gravity: Double) {
        withUnsafePointer(to: gravity) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_gravity, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_gravity")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Area2D.method_get_gravity, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_linear_damp_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2879900038)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp_space_override_mode(_ spaceOverrideMode: Area2D.SpaceOverride) {
        withUnsafePointer(to: spaceOverrideMode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_linear_damp_space_override_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_linear_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_linear_damp_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3990256304)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp_space_override_mode() -> Area2D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(Area2D.method_get_linear_damp_space_override_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return Area2D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_angular_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_angular_damp_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2879900038)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp_space_override_mode(_ spaceOverrideMode: Area2D.SpaceOverride) {
        withUnsafePointer(to: spaceOverrideMode.rawValue) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_angular_damp_space_override_mode, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_angular_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_angular_damp_space_override_mode")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3990256304)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp_space_override_mode() -> Area2D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall(Area2D.method_get_angular_damp_space_override_mode, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return Area2D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_linear_damp")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp(_ linearDamp: Double) {
        withUnsafePointer(to: linearDamp) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_linear_damp, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_linear_damp")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Area2D.method_get_linear_damp, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_angular_damp")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp(_ angularDamp: Double) {
        withUnsafePointer(to: angularDamp) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_angular_damp, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_angular_damp")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp() -> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall(Area2D.method_get_angular_damp, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_priority")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_priority(_ priority: Int32) {
        withUnsafePointer(to: priority) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_priority, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_priority")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_priority() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(Area2D.method_get_priority, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_monitoring: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_monitoring")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_monitoring(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_monitoring, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_monitoring: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_monitoring")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_monitoring() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_is_monitoring, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_monitorable")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_monitorable(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_monitorable, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_monitorable")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_monitorable() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_is_monitorable, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_overlapping_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_overlapping_bodies")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of intersecting ``PhysicsBody2D``s and ``TileMap``s. The overlapping body's ``CollisionObject2D/collisionLayer`` must be part of this area's ``CollisionObject2D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func getOverlappingBodies() -> ObjectCollection<Node2D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(Area2D.method_get_overlapping_bodies, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ObjectCollection<Node2D>(content: _result)
    }
    
    fileprivate static var method_get_overlapping_areas: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_overlapping_areas")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of intersecting ``Area2D``s. The overlapping area's ``CollisionObject2D/collisionLayer`` must be part of this area's ``CollisionObject2D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func getOverlappingAreas() -> ObjectCollection<Area2D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(Area2D.method_get_overlapping_areas, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return ObjectCollection<Area2D>(content: _result)
    }
    
    fileprivate static var method_has_overlapping_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_overlapping_bodies")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if intersecting any ``PhysicsBody2D``s or ``TileMap``s, otherwise returns `false`. The overlapping body's ``CollisionObject2D/collisionLayer`` must be part of this area's ``CollisionObject2D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func hasOverlappingBodies() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_has_overlapping_bodies, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_has_overlapping_areas: GDExtensionMethodBindPtr = {
        let methodName = StringName("has_overlapping_areas")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if intersecting any ``Area2D``s, otherwise returns `false`. The overlapping area's ``CollisionObject2D/collisionLayer`` must be part of this area's ``CollisionObject2D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func hasOverlappingAreas() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_has_overlapping_areas, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_overlaps_body: GDExtensionMethodBindPtr = {
        let methodName = StringName("overlaps_body")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3093956946)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given physics body intersects or overlaps this ``Area2D``, `false` otherwise.
    /// 
    /// > Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
    /// 
    /// The `body` argument can either be a ``PhysicsBody2D`` or a ``TileMap`` instance. While TileMaps are not physics bodies themselves, they register their tiles with collision shapes as a virtual physics body.
    /// 
    public final func overlapsBody(_ body: Node?) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: body?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_overlaps_body, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_overlaps_area: GDExtensionMethodBindPtr = {
        let methodName = StringName("overlaps_area")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3093956946)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given ``Area2D`` intersects or overlaps this ``Area2D``, `false` otherwise.
    /// 
    /// > Note: The result of this test is not immediate after moving objects. For performance, the list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
    /// 
    public final func overlapsArea(_ area: Node?) -> Bool {
        var _result: Bool = false
        withUnsafePointer(to: area?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_overlaps_area, UnsafeMutableRawPointer(mutating: handle), pArgs, &_result)
                }
                
            }
            
        }
        
        return _result
    }
    
    fileprivate static var method_set_audio_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_audio_bus_name")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_audio_bus_name(_ name: StringName) {
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_audio_bus_name, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_audio_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_audio_bus_name")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_audio_bus_name() -> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall(Area2D.method_get_audio_bus_name, UnsafeMutableRawPointer(mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_audio_bus_override: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_audio_bus_override")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_audio_bus_override(_ enable: Bool) {
        withUnsafePointer(to: enable) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(Area2D.method_set_audio_bus_override, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_overriding_audio_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_overriding_audio_bus")
        return withUnsafePointer(to: &Area2D.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_overriding_audio_bus() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(Area2D.method_is_overriding_audio_bus, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when a ``Shape2D`` of the received `body` enters a shape of this area. `body` can be a ``PhysicsBody2D`` or a ``TileMap``. ``TileMap``s are detected if their ``TileSet`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    /// 
    /// `localShapeIndex` and `bodyShapeIndex` contain indices of the interacting shapes from this area and the interacting body, respectively. `bodyRid` contains the ``RID`` of the body. These values can be used with the ``PhysicsServer2D``.
    /// 
    /// **Example of getting the** ``CollisionShape2D`` **node from the shape index:**
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeEntered.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeEntered: GenericSignal<RID, Node2D, Int64, Int64> { GenericSignal<RID, Node2D, Int64, Int64> (target: self, signalName: "body_shape_entered") }
    
    /// Emitted when a ``Shape2D`` of the received `body` exits a shape of this area. `body` can be a ``PhysicsBody2D`` or a ``TileMap``. ``TileMap``s are detected if their ``TileSet`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    /// 
    /// See also [signal body_shape_entered].
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeExited.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeExited: GenericSignal<RID, Node2D, Int64, Int64> { GenericSignal<RID, Node2D, Int64, Int64> (target: self, signalName: "body_shape_exited") }
    
    /// Emitted when the received `body` enters this area. `body` can be a ``PhysicsBody2D`` or a ``TileMap``. ``TileMap``s are detected if their ``TileSet`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyEntered.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyEntered: GenericSignal<Node2D> { GenericSignal<Node2D> (target: self, signalName: "body_entered") }
    
    /// Emitted when the received `body` exits this area. `body` can be a ``PhysicsBody2D`` or a ``TileMap``. ``TileMap``s are detected if their ``TileSet`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyExited.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyExited: GenericSignal<Node2D> { GenericSignal<Node2D> (target: self, signalName: "body_exited") }
    
    /// Emitted when a ``Shape2D`` of the received `area` enters a shape of this area. Requires ``monitoring`` to be set to `true`.
    /// 
    /// `localShapeIndex` and `areaShapeIndex` contain indices of the interacting shapes from this area and the other area, respectively. `areaRid` contains the ``RID`` of the other area. These values can be used with the ``PhysicsServer2D``.
    /// 
    /// **Example of getting the** ``CollisionShape2D`` **node from the shape index:**
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaShapeEntered.connect { areaRid, area, areaShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaShapeEntered: GenericSignal<RID, Area2D, Int64, Int64> { GenericSignal<RID, Area2D, Int64, Int64> (target: self, signalName: "area_shape_entered") }
    
    /// Emitted when a ``Shape2D`` of the received `area` exits a shape of this area. Requires ``monitoring`` to be set to `true`.
    /// 
    /// See also [signal area_shape_entered].
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaShapeExited.connect { areaRid, area, areaShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaShapeExited: GenericSignal<RID, Area2D, Int64, Int64> { GenericSignal<RID, Area2D, Int64, Int64> (target: self, signalName: "area_shape_exited") }
    
    /// Emitted when the received `area` enters this area. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaEntered.connect { area in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaEntered: GenericSignal<Area2D> { GenericSignal<Area2D> (target: self, signalName: "area_entered") }
    
    /// Emitted when the received `area` exits this area. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaExited.connect { area in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaExited: GenericSignal<Area2D> { GenericSignal<Area2D> (target: self, signalName: "area_exited") }
    
}

