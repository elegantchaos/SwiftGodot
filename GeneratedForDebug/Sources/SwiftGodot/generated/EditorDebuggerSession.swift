// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
#if canImport(Darwin)
import Darwin
#elseif os(Windows)
import ucrt
import WinSDK
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#else
#error("Unable to identify your C library.")
#endif
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A class to interact with the editor debugger.
/// 
/// This class cannot be directly instantiated and must be retrieved via a ``EditorDebuggerPlugin``.
/// 
/// You can add tabs to the session UI via ``addSessionTab(control:)``, send messages via ``sendMessage(_:data:)``, and toggle ``EngineProfiler``s via ``toggleProfiler(_:enable:data:)``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``started``
/// - ``stopped``
/// - ``breaked``
/// - ``continued``
open class EditorDebuggerSession: RefCounted {
    override open class var godotClassName: StringName { "EditorDebuggerSession" }
    /* Methods */
    fileprivate static var method_send_message: GDExtensionMethodBindPtr = {
        let methodName = StringName("send_message")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 85656714)!
            }
            
        }
        
    }()
    
    /// Sends the given `message` to the attached remote instance, optionally passing additionally `data`. See ``EngineDebugger`` for how to retrieve those messages.
    public final func sendMessage(_ message: String, data: GArray = GArray ()) {
        let message = GString(message)
        withUnsafePointer(to: message.content) { pArg0 in
            withUnsafePointer(to: data.content) { pArg1 in
                withUnsafePointer(to: UnsafeRawPointersN2(pArg0, pArg1)) { pArgs in
                    pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 2) { pArgs in
                        gi.object_method_bind_ptrcall(EditorDebuggerSession.method_send_message, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_toggle_profiler: GDExtensionMethodBindPtr = {
        let methodName = StringName("toggle_profiler")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1198443697)!
            }
            
        }
        
    }()
    
    /// Toggle the given `profiler` on the attached remote instance, optionally passing additionally `data`. See ``EngineProfiler`` for more details.
    public final func toggleProfiler(_ profiler: String, enable: Bool, data: GArray = GArray ()) {
        let profiler = GString(profiler)
        withUnsafePointer(to: profiler.content) { pArg0 in
            withUnsafePointer(to: enable) { pArg1 in
                withUnsafePointer(to: data.content) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(EditorDebuggerSession.method_toggle_profiler, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_is_breaked: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_breaked")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the attached remote instance is currently in the debug loop.
    public final func isBreaked() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(EditorDebuggerSession.method_is_breaked, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_debuggable: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_debuggable")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the attached remote instance can be debugged.
    public final func isDebuggable() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(EditorDebuggerSession.method_is_debuggable, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName("is_active")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the debug session is currently attached to a remote instance.
    public final func isActive() -> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall(EditorDebuggerSession.method_is_active, UnsafeMutableRawPointer(mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_session_tab: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_session_tab")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Adds the given `control` to the debug session UI in the debugger bottom panel.
    public final func addSessionTab(control: Control?) {
        withUnsafePointer(to: control?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(EditorDebuggerSession.method_add_session_tab, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_remove_session_tab: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_session_tab")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Removes the given `control` from the debug session UI in the debugger bottom panel.
    public final func removeSessionTab(control: Control?) {
        withUnsafePointer(to: control?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(EditorDebuggerSession.method_remove_session_tab, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_set_breakpoint: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_breakpoint")
        return withUnsafePointer(to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 4108344793)!
            }
            
        }
        
    }()
    
    /// Enables or disables a specific breakpoint based on `enabled`, updating the Editor Breakpoint Panel accordingly.
    public final func setBreakpoint(path: String, line: Int32, enabled: Bool) {
        let path = GString(path)
        withUnsafePointer(to: path.content) { pArg0 in
            withUnsafePointer(to: line) { pArg1 in
                withUnsafePointer(to: enabled) { pArg2 in
                    withUnsafePointer(to: UnsafeRawPointersN3(pArg0, pArg1, pArg2)) { pArgs in
                        pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 3) { pArgs in
                            gi.object_method_bind_ptrcall(EditorDebuggerSession.method_set_breakpoint, UnsafeMutableRawPointer(mutating: handle), pArgs, nil)
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        
    }
    
    // Signals 
    /// Emitted when a remote instance is attached to this session (i.e. the session becomes active).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.started.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var started: GenericSignal< /* no args */ > { GenericSignal< /* no args */ > (target: self, signalName: "started") }
    
    /// Emitted when a remote instance is detached from this session (i.e. the session becomes inactive).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.stopped.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var stopped: GenericSignal< /* no args */ > { GenericSignal< /* no args */ > (target: self, signalName: "stopped") }
    
    /// Emitted when the attached remote instance enters a break state. If `canDebug` is `true`, the remote instance will enter the debug loop.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.breaked.connect { canDebug in
    ///    print ("caught signal")
    /// }
    /// ```
    public var breaked: GenericSignal<Bool> { GenericSignal<Bool> (target: self, signalName: "breaked") }
    
    /// Emitted when the attached remote instance exits a break state.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.continued.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var continued: GenericSignal< /* no args */ > { GenericSignal< /* no args */ > (target: self, signalName: "continued") }
    
}

