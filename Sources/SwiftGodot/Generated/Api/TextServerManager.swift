// This file is autogenerated, do not edit
@_implementationOnly import GDExtension

#if CUSTOM_BUILTIN_IMPLEMENTATIONS
#if canImport(Darwin)
import Darwin
#elseif os(Windows)
import ucrt
import WinSDK
#elseif canImport(Glibc)
import Glibc
#elseif canImport(Musl)
import Musl
#else
#error("Unable to identify your C library.")
#endif
#endif
// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A singleton for managing ``TextServer`` implementations.
/// 
/// ``TextServerManager`` is the API backend for loading, enumerating, and switching ``TextServer``s.
/// 
/// > Note: Switching text server at runtime is possible, but will invalidate all fonts and text buffers. Make sure to unload all controls, fonts, and themes before doing so.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``interfaceAdded``
/// - ``interfaceRemoved``
open class TextServerManager: Object {
    /// The shared instance of this class
    public static var shared: TextServerManager = {
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { ptr in
            TextServerManager (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "TextServerManager" }
    /* Methods */
    fileprivate static var method_add_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("add_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Registers a ``TextServer`` interface.
    public static func addInterface(_ interface: TextServer?) {
        withUnsafePointer(to: interface?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_add_interface, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_interface_count: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_interface_count")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of interfaces currently registered.
    public static func getInterfaceCount() -> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall(method_get_interface_count, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_remove_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("remove_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Removes an interface. All fonts and shaped text caches should be freed before removing an interface.
    public static func removeInterface(_ interface: TextServer?) {
        withUnsafePointer(to: interface?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_remove_interface, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1672475555)!
            }
            
        }
        
    }()
    
    /// Returns the interface registered at a given index.
    public static func getInterface(idx: Int32) -> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        withUnsafePointer(to: idx) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_get_interface, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_interfaces: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_interfaces")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of available interfaces, with the index and name of each interface.
    public static func getInterfaces() -> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall(method_get_interfaces, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_find_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("find_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 2240905781)!
            }
            
        }
        
    }()
    
    /// Finds an interface by its `name`.
    public static func findInterface(name: String) -> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        let name = GString(name)
        withUnsafePointer(to: name.content) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_find_interface, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, &_result)
                }
                
            }
            
        }
        
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_primary_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("set_primary_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Sets the primary ``TextServer`` interface.
    public static func setPrimaryInterface(index: TextServer?) {
        withUnsafePointer(to: index?.handle) { pArg0 in
            withUnsafePointer(to: UnsafeRawPointersN1(pArg0)) { pArgs in
                pArgs.withMemoryRebound(to: UnsafeRawPointer?.self, capacity: 1) { pArgs in
                    gi.object_method_bind_ptrcall(method_set_primary_interface, UnsafeMutableRawPointer(mutating: shared.handle), pArgs, nil)
                }
                
            }
            
        }
        
        
    }
    
    fileprivate static var method_get_primary_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName("get_primary_interface")
        return withUnsafePointer(to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer(to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind(classPtr, mnamePtr, 905850878)!
            }
            
        }
        
    }()
    
    /// Returns the primary ``TextServer`` interface currently in use.
    public static func getPrimaryInterface() -> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall(method_get_primary_interface, UnsafeMutableRawPointer(mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    // Signals 
    /// Emitted when a new interface has been added.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.interfaceAdded.connect { interfaceName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var interfaceAdded: GenericSignal<StringName> { GenericSignal<StringName> (target: self, signalName: "interface_added") }
    
    /// Emitted when an interface is removed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.interfaceRemoved.connect { interfaceName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var interfaceRemoved: GenericSignal<StringName> { GenericSignal<StringName> (target: self, signalName: "interface_removed") }
    
}

